name: Rust test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest]
        linkage:
          - dynamic
        rust: [stable]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          components: clippy

      - name: Install OpenCV build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential cmake git pkg-config \
            libgtk-3-dev \
            libavcodec-dev libavformat-dev libswscale-dev \
            libtbb-dev \
            clang libclang-dev

      # Clone OpenCV repositories before checking cache
      - name: Clone OpenCV repositories
        run: |
          OPENCV_VERSION=4.11.0
          git clone --depth 1 --branch $OPENCV_VERSION https://github.com/opencv/opencv.git
          git clone --depth 1 --branch $OPENCV_VERSION https://github.com/opencv/opencv_contrib.git
          mkdir -p opencv/build

      # Cache OpenCV build
      - name: Cache OpenCV build
        id: opencv-cache
        uses: actions/cache@v3
        with:
          path: |
            opencv/build
            /usr/local/include/opencv4
            /usr/local/lib/libopencv_*
            /usr/local/lib/pkgconfig/opencv*
          key: opencv-${{ runner.os }}-${{ hashFiles('opencv/CMakeLists.txt') }}-4.11.0

      # Only build OpenCV if cache miss
      - name: Build OpenCV from source
        if: steps.opencv-cache.outputs.cache-hit != 'true'
        run: |
          cd opencv/build
          cmake \
            -DCMAKE_BUILD_TYPE=RELEASE \
            -DCMAKE_INSTALL_PREFIX=/usr/local \
            -DOPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \
            -DBUILD_opencv_world=ON \
            -DBUILD_TESTS=OFF \
            -DBUILD_EXAMPLES=OFF ..
          make -j$(nproc)
          sudo make install
          sudo ldconfig

      # Install from cache if cache hit
      - name: Install OpenCV from cache
        if: steps.opencv-cache.outputs.cache-hit == 'true'
        run: |
          sudo cp -r /usr/local/include/opencv4 /usr/local/include/ || true
          sudo cp -r /usr/local/lib/libopencv_* /usr/local/lib/ || true
          sudo cp -r /usr/local/lib/pkgconfig/opencv* /usr/local/lib/pkgconfig/ || true
          sudo ldconfig

      - name: Set OpenCV env vars (required by opencv crate)
        run: |
          echo "PKG_CONFIG_PATH=/usr/local/lib/pkgconfig" >> $GITHUB_ENV
          echo "OPENCV_INCLUDE_PATHS=/usr/local/include/opencv4" >> $GITHUB_ENV
          echo "OPENCV_LINK_LIBS=opencv_world" >> $GITHUB_ENV
          echo "OPENCV_LINK_PATHS=/usr/local/lib" >> $GITHUB_ENV

      - name: Clippy
        run: cargo clippy  --all --all-targets --features "clang-runtime"

      - name: Build
        run: cargo build --verbose --all --all-targets --features "clang-runtime"

      - name: Run tests
        run: cargo test --verbose --features "clang-runtime"